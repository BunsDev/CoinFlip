
const People = artifacts.require("People");
const truffleAssert = require("truffle-assertions");


contract("People", async function(accounts){

  let instance;

  before(async function(){
    instance = await People.deployed()
  });

  it("shouldn't create a person with age over 150 years", async ()=>{
    await truffleAssert.fails(instance.createPerson("Bob", 200, 190, {value: web3.utils.toWei("1", "ether")}), truffleAssert.ErrorType.REVERT);
  });
  it("shouldn't create a person without payment", async ()=> {
    await truffleAssert.fails(instance.createPerson("Bob", 50, 190, {value: 1000}), truffleAssert.ErrorType.REVERT);
  });
  it("should set senior status correctly", async ()=>{
    await instance.createPerson("Bob", 65, 190, {value: web3.utils.toWei("1", "ether")});
    let result = await instance.getPerson();
    assert(result.senior === true, "Senior level not set");
  });
  it("should set age correctly", async ()=>{
    let result = await instance.getPerson();
    assert(result.age.toNumber() === 65, "Age not set correctly");
  });
  it("should allow the owner to delete people", async ()=> {
    await instance.createPerson("Carl", 24, 190, {from: accounts[3], value: web3.utils.toWei("1", "ether")});
    await truffleAssert.passes(instance.deletePerson(accounts[1], {from: accounts[0]}));
  });
  it("shouldn't allow another then the master account to delete people", async ()=> {
    await instance.createPerson("Carl", 24, 190, {from: accounts[3], value: web3.utils.toWei("1", "ether")});
    await truffleAssert.fails(instance.deletePerson(accounts[2], {from: accounts[2]}), truffleAssert.ErrorType.REVERT);
  });
  it("should allow the owner to withdraw balance", async function(){
    await instance.createPerson("Carl", 24, 190, {from: accounts[3], value: web3.utils.toWei("1", "ether")});
    await truffleAssert.passes(instance.withdrawAll({from: accounts[0]}));
  });
  it("should increase account owner balance", async ()=> {
    let currentBalance = await parseFloat(await web3.eth.getBalance(accounts[0]));
    await instance.createPerson("Carl", 24, 190, {from: accounts[3], value: web3.utils.toWei("1", "ether")});
    await instance.withdrawAll();
    let newBalance = await parseFloat(await web3.eth.getBalance(accounts[0]));
    assert(currentBalance < newBalance, "owner balance increase");
  });

  it("should reset the balance to 0", async ()=> {
     //let instance = await People.new();
    let currentBalance = await parseFloat(await web3.eth.getBalance(accounts[0]));
    await instance.createPerson("Carl", 24, 190, {from: accounts[3], value: web3.utils.toWei("1", "ether")});
    await instance.withdrawAll();

    let balance = await instance.balance();
    let floatBalance = parseFloat(balance);

    let realBalance = await web3.eth.getBalance(instance.address);

   assert(floatBalance == 0 && floatBalance == realBalance, "Contract balance was reset after withdrawal")

  });
});
